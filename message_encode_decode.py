# -*- coding: utf-8 -*-
"""Message Encode Decode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kV07k4X2sgy_gZTBcEYq7XgmpVyL007K

Encoding is the process that transforms the text or information to the unrecognizable form and decryption is the process to convert the encrypted message into original form.
Message encoding and decoding is the process to first convert the original text to the random and meaningless text called ciphertext. This process is called encoding. Decoding is the process to convert that ciphertext to the original text. This process is also called the Encryption-Decryption process.
This objective of this project is to encode and decode messages using a common key. This project will be built using the Tkinter and base64 library.
In this project, users have to enter the message to encode or decode. Users have to select the mode to choose the encoding and decoding process. The same key must be used to process the encoding and decoding for the same message.
"""

#Virtual Display of GUI
!apt-get install -y xvfb x11-utils
!pip install pyvirtualdisplay
from pyvirtualdisplay import Display
display = Display(visible=0, size=(1024, 768))
display.start()

#Tkinter is a standard GUI python library
#base64 module provides a function to encode the binary data to ASCII characters and decode that ASCII characters back to binary data.
from tkinter import *
import base64

#Initializing window
from tkinter import Tk

# start the virtual display
display = Display(visible=0, size=(1024, 768))
display.start()

# create the Tkinter window
root = Tk()

# set window properties
root.geometry('500x300')
root.resizable(0,0)
root.title("DataFlair - Message Encode and Decode")

# show the window
root.mainloop()

# stop the virtual display
display.stop()

Label(root, text ='ENCODE DECODE', font = 'arial 20 bold').pack()

Label(root, text ='DataFlair', font = 'arial 20 bold').pack(side =BOTTOM)

Text = StringVar()
private_key = StringVar()
mode = StringVar()
Result = StringVar()

#Encoding function
def Encode(key,message):
    enc=[]

    for i in range(len(message)):
        key_c = key[i % len(key)]
         enc.append(chr((ord(message[i]) + ord(key_c)) % 256))
    return base64.urlsafe_b64encode("".join(enc).encode()).decode()

#Decoding function
def Decode(key,message):
    dec=[]
    message = base64.urlsafe_b64decode(message).decode()

    for i in range(len(message)):
        key_c = key[i % len(key)]
        dec.append(chr((256 + ord(message[i])- ord(key_c)) % 256))
    return "".join(dec)

#Set mode function
def Mode():
    if(mode.get() == 'e'):
        Result.set(Encode(private_key.get(), Text.get()))
    elif(mode.get() == 'd'):
        Result.set(Decode(private_key.get(), Text.get()))
    else:
        Result.set('Invalid Mode')

#Exit window
def Exit():
    root.destroy()

#Reset window
def Reset():
    Text.set("")
    private_key.set("")
    mode.set("")
    Result.set("")

#Label Buttons
Label(root, font= 'arial 12 bold', text='MESSAGE').place(x= 60,y=60)
Entry(root, font = 'arial 10', textvariable = Text, bg = 'ghost white').place(x=290, y = 60)

Label(root, font = 'arial 12 bold', text ='KEY').place(x=60, y = 90)
Entry(root, font = 'arial 10', textvariable = private_key , bg ='ghost white').place(x=290, y = 90)

Label(root, font = 'arial 12 bold', text ='MODE(e-encode, d-decode)').place(x=60, y = 120)
Entry(root, font = 'arial 10', textvariable = mode , bg= 'ghost white').place(x=290, y = 120)
Entry(root, font = 'arial 10 bold', textvariable = Result, bg ='ghost white').place(x=290, y = 150)

Button(root, font = 'arial 10 bold', text = 'RESULT'  ,padx =2,bg ='LightGray' ,command = Mode).place(x=60, y = 150)

Button(root, font = 'arial 10 bold' ,text ='RESET' ,width =6, command = Reset,bg = 'LimeGreen', padx=2).place(x=80, y = 190)

Button(root, font = 'arial 10 bold',text= 'EXIT' , width = 6, command = Exit,bg = 'OrangeRed', padx=2, pady=2).place(x=180, y = 190)

root.mainloop()

